{"version":3,"sources":["../../src/tools/tools.js"],"names":["exceed","firstTime","getCipher","str","cipher","createCipher","enc","update","final","getDecipher","deCipher","createDecipher","deenc","authentication","req","res","next","headers","token","url","Date","getTime","body","userName","nowTime","json","code","msg","redirect"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,SAAS,IAAf;AACA,IAAIC,YAAY,CAAhB;;AAEA,IAAMC,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAS;AACvB,QAAMC,SAAS,iBAAOC,YAAP,CAAoB,QAApB,EAA8B,OAA9B,CAAf;AACA,QAAIC,MAAMF,OAAOG,MAAP,CAAcJ,GAAd,EAAmB,OAAnB,EAA4B,KAA5B,CAAV;AACAG,WAAOF,OAAOI,KAAP,CAAa,KAAb,CAAP;AACA,WAAOF,GAAP;AACH,CALD;;AAOA,IAAMG,cAAc,SAAdA,WAAc,CAACN,GAAD,EAAS;AACzB,QAAMO,WAAW,iBAAOC,cAAP,CAAsB,QAAtB,EAAgC,OAAhC,CAAjB;AACA,QAAIC,QAAQF,SAASH,MAAT,CAAgBJ,GAAhB,EAAqB,KAArB,EAA4B,OAA5B,CAAZ;AACAS,aAASF,SAASF,KAAT,CAAe,OAAf,CAAT;AACA,WAAOI,KAAP;AACH,CALD;;AAOA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,QAAIF,IAAIG,OAAJ,CAAYC,KAAZ,KAAsB,EAAtB,IAA4BJ,IAAIK,GAAJ,KAAY,QAA5C,EAAsD;AAClDlB,oBAAY,CAAC,EAAE,IAAImB,IAAJ,GAAWC,OAAX,KAAuB,IAAzB,CAAb;AACAP,YAAIG,OAAJ,CAAYC,KAAZ,GAAoBhB,UAAUY,IAAIQ,IAAJ,CAASC,QAAnB,CAApB;AACAP;AACH,KAJD,MAIO;AACH,YAAMQ,UAAU,CAAC,EAAE,IAAIJ,IAAJ,GAAWC,OAAX,KAAuB,IAAzB,CAAjB;AACA,YAAGG,UAAUvB,SAAV,IAAuBD,MAA1B,EAAkC;AAC9Be,gBAAIU,IAAJ,CAAS;AACLC,sBAAM,CADD;AAELC,qBAAK,WAFA;AAGLC,0BAAU;AAHL,aAAT;AAKH,SAND,MAMO;AACHZ;AACH;AACJ;AACJ,CAjBD;;QAoBId,S,GAAAA,S;QACAO,W,GAAAA,W;QACAI,c,GAAAA,c","file":"tools.js","sourcesContent":["import crypto from 'crypto';\n\nconst exceed = 7200;\nlet firstTime = 0;\n\nconst getCipher = (str) => {\n    const cipher = crypto.createCipher('aes192', 'admin');\n    let enc = cipher.update(str, 'utf-8', 'hex');\n    enc += cipher.final('hex');\n    return enc\n};\n\nconst getDecipher = (str) => {\n    const deCipher = crypto.createDecipher('aes192', 'admin');\n    let deenc = deCipher.update(str, 'hex', 'utf-8');\n    deenc += deCipher.final('utf-8');\n    return deenc\n};\n\nconst authentication = (req, res, next) => {\n    if( req.headers.token === '' && req.url === '/login' ){\n        firstTime = ~~(new Date().getTime() / 1000);\n        req.headers.token = getCipher(req.body.userName);\n        next()\n    } else {\n        const nowTime = ~~(new Date().getTime() / 1000);\n        if(nowTime - firstTime >= exceed) {\n            res.json({\n                code: 0,\n                msg: '鉴权失效请重新登陆',\n                redirect: '/api/login'\n            })\n        } else {\n            next()\n        }\n    }\n};\n\nexport {\n    getCipher,\n    getDecipher,\n    authentication\n}"]}